generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

//Etentity User 

model User {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  email             String              @unique
  username          String              @unique
  password          String
  provider          Provider            @default(CREDENTIAL)
  profile           Profile?
  verification      VerificationToken?
  articles          Article[]
  commentsArticles  ArticleComments[]
  likeArticles      ArticleLike[]
  saveArticles      ArticleSaveByUser[]
  saveCourses       CourseSaveByUser[]
  courses           Course[]
  CourseReview      CourseReview[]
  CourseBuyedByUser CourseBuyedByUser[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Provider {
  GOOGLE
  GITHUB
  CREDENTIAL
}

model Image {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  url    String
  fileId String?

  profile   Profile @relation(fields: [profileId], references: [id])
  profileId String  @unique @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  user   User    @relation(fields: [userId], references: [id])
  userId String  @unique @db.ObjectId
  bio    String?
  image  Image?
  role   Role    @default(USER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  ADMIN
  USER
  TEACHER
}

model VerificationToken {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  user  User   @relation(fields: [email], references: [email])
  email String @unique
  token String @unique

  isVerified Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//etentity article

model Cover {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  url    String
  fileId String

  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId String  @unique @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Article {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String
  slug      String        @unique
  cover     Cover?
  author    User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String        @db.ObjectId
  status    ArticleStatus @default(DRAFT)
  viewCount Int           @default(0)

  tags     TagsArticle[]
  comments ArticleComments[]
  likes    ArticleLike[]
  saves    ArticleSaveByUser[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ArticleStatus {
  DRAFT
  PUBLISHED
  APPROVED
  REJECT
}

model Tag {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  tag       String        @unique
  articles  TagsArticle[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model TagsArticle {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  article   Article @relation(fields: [articleId], references: [id])
  articleId String  @db.ObjectId
  tags      Tag     @relation(fields: [tagId], references: [id])
  tagId     String  @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([articleId, tagId])
}

model ArticleComments {
  id        String            @id @default(auto()) @map("_id") @db.ObjectId
  article   Article           @relation(fields: [articleId], references: [id])
  articleId String            @db.ObjectId
  user      User              @relation(fields: [userId], references: [id])
  userId    String            @db.ObjectId
  message   String
  parentId  String?           @db.ObjectId
  parent    ArticleComments?  @relation("ParentChildren", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children  ArticleComments[] @relation("ParentChildren")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ArticleLike {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  article   Article @relation(fields: [articleId], references: [id])
  articleId String  @db.ObjectId
  UserLike  User    @relation(fields: [likedBy], references: [id])
  likedBy   String  @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([articleId, likedBy])
}

model ArticleSaveByUser {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  article   Article  @relation(fields: [articleId], references: [id])
  articleId String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([articleId, userId])
}

//Entity Course
model CoverCourse {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  url    String
  fileId String

  courseId String @unique @db.ObjectId
  course   Course @relation(fields: [courseId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Course {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String  @unique
  description String
  isPublished Boolean @default(false)
  price       Float   @default(0)

  chapters          Chapter[]
  resources         Resource[]
  cover             CoverCourse?
  userSaves         CourseSaveByUser[]
  CourseReview      CourseReview[]
  CourseBuyedByUser CourseBuyedByUser[]

  author   User   @relation(fields: [authorId], references: [id])
  authorId String @db.ObjectId

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String   @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  courses   Course[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Resource {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  url   String

  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  courseId String @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Chapter {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String?
  description String?
  video       Video?
  isUnlocked  Boolean @default(false)

  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Video {
  id     String    @id @default(auto()) @map("_id") @db.ObjectId
  url    String
  fileId String?
  name   NameVideo @default(UPLOAD)

  chapter   Chapter @relation(fields: [chapterId], references: [id])
  chapterId String  @unique @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum NameVideo {
  UPLOAD
  YOUTUBE
}

model CourseSaveByUser {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  user     User   @relation(fields: [userId], references: [id])
  userId   String @db.ObjectId
  course   Course @relation(fields: [courseId], references: [id])
  courseId String @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([courseId, userId])
}

model CourseReview {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  course   Course @relation(fields: [courseId], references: [id])
  courseId String @db.ObjectId
  user     User   @relation(fields: [userId], references: [id])
  userId   String @db.ObjectId
  review   String
  rating   Float  @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
}

model CourseBuyedByUser {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  course      Course    @relation(fields: [courseId], references: [id])
  courseId    String    @db.ObjectId
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @db.ObjectId
  isPurchased Boolean   @default(false)
  snap_token  String?
  status      STATUSBUY @default(UNPAID)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
}

enum STATUSBUY {
  PAID
  UNPAID
}
