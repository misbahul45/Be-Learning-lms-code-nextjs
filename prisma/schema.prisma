generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

//Etentity User 

model User {
  id               String              @id @default(auto()) @map("_id") @db.ObjectId
  email            String              @unique
  username         String              @unique
  password         String
  provider         Provider            @default(CREDENTIAL)
  profile          Profile?
  verification     VerificationToken?
  articles         Article[]
  commentsArticles ArticleComments[]
  likeArticles     ArticleLike[]
  saveArticles     ArticleSaveByUser[]

  courses Course[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Provider {
  GOOGLE
  GITHUB
  CREDENTIAL
}

model Image {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  url    String
  fileId String?

  profile   Profile @relation(fields: [profileId], references: [id])
  profileId String  @unique @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  user   User    @relation(fields: [userId], references: [id])
  userId String  @unique @db.ObjectId
  bio    String?
  image  Image?
  role   Role    @default(USER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  ADMIN
  USER
  TEACHER
}

model VerificationToken {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  user  User   @relation(fields: [email], references: [email])
  email String @unique
  token String @unique

  isVerified Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//etentity article

model Cover {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  url    String
  fileId String

  article   Article @relation(fields: [articleId], references: [id])
  articleId String  @unique @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Article {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String
  slug      String        @unique
  cover     Cover?
  author    User          @relation(fields: [authorId], references: [id])
  authorId  String        @db.ObjectId
  status    ArticleStatus @default(DRAFT)
  viewCount Int           @default(0)

  tags     TagsArticle[]
  comments ArticleComments[]
  likes    ArticleLike[]
  saves    ArticleSaveByUser[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ArticleStatus {
  DRAFT
  PUBLISHED
  APPROVED
}

model Tag {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  tag       String        @unique
  articles  TagsArticle[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model TagsArticle {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  article   Article @relation(fields: [articleId], references: [id])
  articleId String  @db.ObjectId
  tags      Tag     @relation(fields: [tagId], references: [id])
  tagId     String  @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([articleId, tagId])
}

model ArticleComments {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  article   Article  @relation(fields: [articleId], references: [id])
  articleId String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([articleId, userId])
}

model ArticleLike {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  article   Article @relation(fields: [articleId], references: [id])
  articleId String  @db.ObjectId
  UserLike  User    @relation(fields: [likedBy], references: [id])
  likedBy   String  @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([articleId, likedBy])
}

model ArticleSaveByUser {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  article   Article  @relation(fields: [articleId], references: [id])
  articleId String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([articleId, userId])
}

//Entity Course
model Course {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  title       String?
  description String?
  chapters    Chapter[]
  resources   Resource[]
  isPublished Boolean    @default(false)
  price       Float      @default(0)
  isFree      Boolean    @default(false)

  author   User   @relation(fields: [authorId], references: [id])
  authorId String @db.ObjectId

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String   @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  courses   Course[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Resource {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  title String?
  url   String?

  course   Course @relation(fields: [courseId], references: [id])
  courseId String @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Chapter {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String?
  description String?
  video       Video?
  content     String?
  ytUrl       String?

  accessible Boolean @default(false)

  course   Course? @relation(fields: [courseId], references: [id])
  courseId String? @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Video {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  url    String?
  fileId String?

  chapter   Chapter @relation(fields: [chapterId], references: [id])
  chapterId String  @unique @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
