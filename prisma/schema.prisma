generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

//Etentity User 

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  email         String    @unique
  username      String    @unique
  password      String
  provider      Provider  @default(CREDENTIAL)
  profile       Profile?
  emailVerified DateTime?

  courses Course[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Provider {
  GOOGLE
  GITHUB
  CREDENTIAL
}

model Image {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  url    String
  fileId String?

  profile   Profile? @relation(fields: [profileId], references: [id])
  profileId String?  @unique @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  user   User?   @relation(fields: [userId], references: [id])
  userId String  @unique @db.ObjectId
  bio    String?
  image  Image?
  role   Role    @default(USER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  ADMIN
  USER
  TEACHER
}

model VerificationToken {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  email String
  token String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//Entity Course
model Course {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  title       String?
  description String?
  chapters    Chapter[]
  resources   Resource[]
  isPublished Boolean    @default(false)
  price       Float      @default(0)
  isFree      Boolean    @default(false)

  author   User   @relation(fields: [authorId], references: [id])
  authorId String @db.ObjectId

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String   @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  courses   Course[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Resource {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  title String?
  url   String?

  course   Course @relation(fields: [courseId], references: [id])
  courseId String @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Chapter {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String?
  description String?
  video       Video?
  content     String?
  ytUrl       String?

  accessible Boolean @default(false)

  course   Course? @relation(fields: [courseId], references: [id])
  courseId String? @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Video {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  url    String?
  fileId String?

  chapter   Chapter @relation(fields: [chapterId], references: [id])
  chapterId String  @unique @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
